swagger: '2.0'
info:
  version: "v0"
  title: Flight Information Management System (FIMS) Authorization (Authz) Server
  description: >
    FIMS_Authz provides authorization services for FIMS and USS stakeholders within UTM.
    FIMS_Authz is an OAuth 2.0 compliant server.  The endpoints and data exchnages provided
    by this server are based on open standards.

host: utm.defined.url
basePath: /fimsAuthServer/oauth
schemes:
 - https

securityDefinitions:
  application:
    description: A write scope allows reading.
    type: oauth2
    # Should be updated to the Token URL of your OAuth provider.
    tokenUrl: https://utm.defined.host/oauth/token
    flow: application
    scopes:
      'utm.nasa.gov_read.fimsadmin': Subject can read data internal to FIMS.
      'utm.nasa.gov_write.fimsadmin': Subject can read, create, and update data internal to FIMS.
      'utm.nasa.gov_read.operation': Subject can read operational data such as USS Instance data
      'utm.nasa.gov_write.operation': Subject can read, create, and update operational data such as USS Instance data
      'utm.nasa.gov_read.message': Subject can read message data such as UTM Message and Negotiations
      'utm.nasa.gov_write.message': Subject can read, create, and update message data such as UTM Message and Negotiations
      'utm.nasa.gov_read.publicsafety': Subject can read operations that are designated public safety operations.
      'utm.nasa.gov_write.publicsafety': Subject can read, create, and update operations that are designated public safety operations.
      'utm.nasa.gov_read.constraint': Subject can read UTM constraint data
      'utm.nasa.gov_write.constraint': Subject can read, create, and update UTM constraint data. This means that the Subject can define areas that restrict other operations.
      'utm.nasa.gov_read.conflictmanagement':  Subject can read conflict management data.
      'utm.nasa.gov_write.conflictmanagement':  Subject can read and write conflict management data.

  authenticate_using_client_credentials:
    type: basic
    description: >
        The FIMS AZ server authenticates clients using the HTTP Authorization header with the
        Basic keyword and the oauth2 client secret. Note that the FIMS Authorization Server
        facilitates the RFC-6749 Client Credentials flow for UTM components that are Oauth2
        Resources servers.

paths:

  /authorize:
    get:
      tags:
        - 'A. Required Endpoints'
      summary: Obtain an authorization grant (unsupported in UTM, but required by OAuth specification)
      description: >
        This endpoint is required as per RFC 6749.  However since FIMS only supports the Client Credentials Grant flow, there is no use of this endpoint currently. It is defined in case there is an use case in the future that requires it. Currently returns 501 (Not implemented) on a GET.  POST not supported at all.
      responses:
        '501':
          description: Not Implemented
          schema:
            $ref: 'https://raw.githubusercontent.com/nasa/utm-apis/v4-draft/utm-domains/utm-domain-commons.yaml#/definitions/UTMRestResponse'
  /token:
    post:
      tags:
        - 'A. Required Endpoints'
      summary: Obtain an access token.
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/json
      security:
        - authenticate_using_client_credentials: []
      description: >
        This endpoint is required as per RFC 6749.  A POST to this endpoint acts as a request for an access token.
      parameters:
        - name: grant_type
          in: formData
          description: Type of grant. Must be 'client_credentials'.
          required: true
          type: string
          enum:
          - client_credentials
        - name: scope
          in: formData
          description: Scope (one and only one) to be associated with the access token being requested. An error code of 400 will be returned if no scope, incorrect scope or more than one scope is specified.
          type: string
          enum:
          - scope  # This should match one of securityDefinitions scopes value in this spec
                   # See https://github.com/OAI/OpenAPI-Specification/issues/300
                   # Maybe solved in v3.0 OpenAPI spec, maybe stuck until then.
      responses:
        # TODO: add appropriate JSON response.  Model needs to be written.
        '200':
          description: OK
          schema:
            $ref: '#/definitions/TokenResponse'
        '400':
          description: 'Bad Request'
# This should align with our Spring configuration
# (http://projects.spring.io/spring-security-oauth/docs/oauth2.html)
  /token_key:
    get:
      tags:
        - 'A. Required Endpoints'
      summary: Get the OAuth server public key required for checking token signatures. Not currently implemented.
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/TokenKeyResponse'

  /check_token:
    get:
      deprecated: true
      tags:
        - 'A. Required Endpoints'
      summary: |
        Current name for the RFC 7662 /introspect implementation.
      responses:
        '410':
          description: Gone. This endpoint is deprecated and will not be re-enabled.

  # Needs work.  See RFC 7009
  /revoke:
    post:
      tags:
        - 'A. Required Endpoints'
      summary: Post a token revocation request. Not currently implemented.
      consumes:
        - application/x-www-form-urlencoded
      parameters:
        - name: token
          in: formData
          description: The Java Web Token that the client wants revoked.
          type: string
          format: jwt
          required: true
        - name: token_hint
          in: formData
          description: >-
            A hint about the type of the token submitted for revocation.  Clients MAY pass this parameter in order to help the authorization server to optimize the token lookup.  If the server is unable to locate the token using the given hint, it MUST extend its search across all of its supported token types.  An authorization server MAY ignore this parameter, particularly if it is able to detect the token type automatically.
          type: string
          enum:
          - access_token
          - refresh_token
      responses:
        # Per spec, nothing is actually returned in nearly any case. see RFC 7009, Sec 2.2.
        '200':
          description: OK
        '400':
          description: Bad request

  /oauth-authorization-server:
    get:
      tags:
        - 'A. Required Endpoints'
      summary: Get API Info. Not currently implemented.
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Metadata'
  /api:
    get:
      tags:
        - B. Version and Health
      summary: get server info.  Can be used to check health.
      security: []
      produces:
        - application/json
      responses:
        200:
          description: OK
          schema:
            $ref: 'https://raw.githubusercontent.com/nasa/utm-apis/v4-draft/utm-domains/utm-domain-commons.yaml#/definitions/Version'

definitions:
  TokenResponse:
    type: object
    properties:
      access_token:
        type: string
        format: JwsCompactSerialization
        description: "see definitions/JwsCompactSerialization in this spec"
      scope:
        type: string
        description: "white space separated list of scopes"
      token_type:
        type: string
        enum:
        - "bearer"
      expires_in:
      # Would like to remove this from the response since it open possbility of contradicting the 'exp' value in the token itself.
        type: number
        format: integer
        description: "see definitions/JwtClaimsSet.exp property in this spec"

      sub:
        type: string
        description: "see definitions/JwtClaimsSet in this spec"
      jti:
        type: string
        format: uuid
        description: "see definitions/JwtClaimsSet in this spec"
      iss:
        type: string
        description: "see definitions/JwtClaimsSet in this spec"
      nbf:
        type: number
        description: "see definitions/JwtClaimsSet in this spec"
    example:
      access_token: tokenstring
      token_type: bearer
      expires_in: 3599
      scope: utm.nasa.gov_write.operation
      sub: nuss1.testing.nasa.gov
      nbf: 1509470774
      iss: fims.arc.nasa.gov/fimsAuthServer
      jti: 4d4c1a63-0959-48cc-885a-3648fd582db7


  JwsCompactSerialization:
    description: >-
      The token provided by the FIMS Authorization Server is a JWS representing a JWT.  The token is actually a JWS Compact Serialization string as described in RFC 7515.  For clarity of documentation, we represent the pre-serialized components here as a JSON schema.
    type: object
    properties:
      jose_header:
        $ref: '#/definitions/JoseHeader'
      jws_payload:
        $ref: '#/definitions/JwtClaimsSet'
      jws_signature:
        type: string
        description: >-
          See RFC 7515 for details.

  JoseHeader:
    type: object
    properties:
      alg:
        type: string
      typ:
        type: string
        enum:
        - JWT
        description: >-
          The FIMS Authorization Server only support 'JWT' (JSON Web Token) as the algorithm type.



  # From Spring OAuth. Documentation sparse.
  TokenKeyResponse:
    type: object
    properties:
      alg:
        type: string
        # This seems like it would be a value from an RFC, but is from a Java spec (I think):
        # http://docs.oracle.com/javase/8/docs/technotes/guides/security/StandardNames.html
        description: >-
          A designator for the algorithm used to sign the key.  Values defined by a Java specfication from Oracle (http://docs.oracle.com/javase/8/docs/technotes/guides/security/StandardNames.html).
      value:
        type: string
        description: >-
          A key signed by the algorithm noted in 'alg' property.  The key is preceded by '-----BEGIN PUBLIC KEY-----\n' without the single quotes and appended with '\n-----END PUBLIC KEY-----' without the single quotes.

  JwtClaimsSet:
    type: object
    properties:
      iss:
        type: string
        format: URL
        description: >-
          The "iss" (issuer) claim identifies the principal that issued the JWT. The URL of the FIMS Authorization Server.
      # We should discuss the right identifier for 'sub'
      sub:
        type: string
        description: >-
          The "sub" (suv4-draft identifies the principal that is the subject of the JWT.
      # aud.  We don't need the aud claim as of now as far as I can tell.
      # The time values are tricky. Would be nice to have common format with other APIs.  These defs are in RFC7519.
      exp:
        type: integer
        format: unix-time
        description: >-
          The "exp" (expiration time) claim identifies the expiration time on or after which the JWT MUST NOT be accepted for processing.  The processing of the "exp" claim requires that the current date/time MUST be before the expiration date/time listed in the "exp" claim.
      nbf:
        type: integer
        format: unix-time
        description: >-
          The "nbf" (not before) claim identifies the time before which the JWT MUST NOT be accepted for processing.  The processing of the "nbf" claim requires that the current date/time MUST be after or equal to the not-before date/time listed in the "nbf" claim.
      iat:
        type: integer
        format: unix-time
        description: >-
          The "iat" (issued at) claim identifies the time at which the JWT was issued.  This claim can be used to determine the age of the JWT.
      jti:
        type: string
        format: uuid
        description: >-
          The "jti" (JWT ID) claim provides a unique identifier for the JWT. For this server, this is satisfied by the use of a UUID.

      scope:
        description: >-
          See securityDefinitions section in this spec.


  Metadata:
    type: object
    required:
      - issuer
      - authorization_endpoint
    properties:
      issuer:
        type: string
        format: url
        description: >-
          The authorization server's issuer identifier, which is a URL that uses the "https" scheme and has no query or fragment components.  This is the location where ".well-known" RFC 5785 resources containing information about the authorization server are published.  Using these well-known resources is described in Section 3.  The issuer identifier is used to prevent authorization server mix-up attacks, as described in "OAuth 2.0 Mix-Up Mitigation".
      authorization_endpoint:
        type: string
        format: url
        description: >-
          URL of the authorization server's authorization endpoint [RFC6749].
      token_endpoint:
        type: string
        format: url
        description: >-
          URL of the authorization server's token endpoint [RFC6749].  This is REQUIRED unless only the implicit grant type is used.
      scopes_supported:
        type: array
        items:
          $ref: 'https://raw.githubusercontent.com/nasa/utm-apis/v4-draft/utm-domains/utm-domain-commons.yaml#/definitions/Version'
        description: >-
          JSON array containing a list of the OAuth 2.0 [RFC6749] "scope" values that this authorization server supports. Servers MAY choose not to advertise some supported scope values even when this parameter is used.
# Currently no response types supported, return empty array
      response_types_supported:
        type: array
        items:
          type: string
        description: >-
          JSON array containing a list of the OAuth 2.0 "response_type" values that this authorization server supports. These values are required for responses from calls to the authorization endpoint, thus this array may be empty if no grant flows use the authorization endpoint, thus this server returns an empty array. (definitions in RFC 7591)
# Currently no response modes supported, return empty array
      response_modes_supported:
        type: array
        items:
          type: string
        description: >-
          JSON array containing a list of the OAuth 2.0 "response_mode" values that this authorization server supports, as specified in OAuth 2.0 Multiple Response Type Encoding Practices.  If omitted, the default is "["query", "fragment"]".  The response mode value "form_post" is also defined in OAuth 2.0 Form Post Response Mode.dd
# Only grant type currently supported is "client_credentials"
      grant_types_supported:
        type: array
        items:
          type: string
        description: >-
          JSON array containing a list of the OAuth 2.0 grant type values that this authorization server supports. (definitions in RFC 7591)
      token_endpoint_auth_methods_supported:
        type: array
        items:
          type: string
        description: >-
          JSON array containing a list of client authentication methods supported by this token endpoint.  Client authentication method values are used in the "token_endpoint_auth_method" parameter defined in Section 2 of [RFC7591].  If omitted, the default is "client_secret_basic" -- the HTTP Basic Authentication Scheme specified in Section 2.3.1 of OAuth 2.0 [RFC6749]. FIMS-Authz will only support private_key_jwt.
      token_endpoint_auth_signing_alg_values_supported:
        type: array
        items:
          type: string
        description: >-
          JSON array containing a list of the JWS signing algorithms (alg values) supported by the token endpoint for the signature on the JWT [JWT] used to authenticate the client at the token endpoint for the "private_key_jwt" and "client_secret_jwt" authentication methods.  Servers SHOULD support "RS256". The value "none" MUST NOT be used.
      service_documentation:
        type: string
        format: url
        description: >-
          URL of a page containing human-readable information that developers might want or need to know when using the authorization server.  In particular, if the authorization server does not support Dynamic Client Registration, then information on how to register clients needs to be provided in this documentation.
      op_tos_uri:
        type: string
        format: url
        description: >-
          URL that the authorization server provides to the person registering the client to read about the authorization server's terms of service.  The registration process SHOULD display this URL to the person registering the client if it is given.
      revocation_endpoint:
        type: string
        format: url
        description: >-
          URL of the authorization server's OAuth 2.0 revocation endpoint [RFC7009].
# The return array for this endpoint should match token_endpoint_auth_methods_supported
      revocation_endpoint_auth_methods_supported:
        type: array
        items:
          type: string
        description: >-
          JSON array containing a list of client authentication methods supported by this revocation endpoint.  The valid client authentication method values are those registered in the IANA "OAuth Token Endpoint Authentication Methods" registry [IANA.OAuth.Parameters].
      introspection_endpoint:
        type: string
        format: url
        description: >-
          URL of the authorization server's OAuth 2.0 introspection endpoint [RFC7662].
      # The return array for this endpoint should match token_endpoint_auth_methods_supported
      introspection_endpoint_auth_methods_supported:
        type: array
        items:
          type: string
        description: >-
          JSON array containing a list of client authentication methods supported by this introspection endpoint.  The valid client authentication method values are those registered in the IANA "OAuth Token Endpoint Authentication Methods" registry [IANA.OAuth.Parameters] or those registered in the IANA "OAuth Access Token Types" registry [IANA.OAuth.Parameters].  (These values are and will remain distinct, due to Section 7.2.)

      # TODO: This is not the right way to describe our claims.  needs fixing.  It's like we really want to be returning the YAML/JSON model schema itself, not an instance of it as is implied by this definition.
      jwt_claims:
        $ref: '#/definitions/JwtClaimsSet'
